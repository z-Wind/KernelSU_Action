name: Build Kernel
on:
  watch:
    types: [started]

  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Configuration
        run: |
          CONFIG_ENV=$(cat config.env | grep -w "CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)
          echo "KERNEL_SOURCE=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat $CONFIG_ENV | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat $CONFIG_ENV | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_IMAGE_NAME=$(cat $CONFIG_ENV | grep -w "KERNEL_IMAGE_NAME" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ARCH=$(cat $CONFIG_ENV | grep -w "ARCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "EXTRA_CMDS=$(cat $CONFIG_ENV | grep -w "EXTRA_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CLANG_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_CLANG_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_CMDS=$(cat $CONFIG_ENV | grep -w "CUSTOM_CMDS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_64_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_64_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_SOURCE=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_BRANCH=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "CUSTOM_GCC_32_BIN=$(cat $CONFIG_ENV | grep -w "CUSTOM_GCC_32_BIN" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_KERNELSU=$(cat $CONFIG_ENV | grep -w "ENABLE_KERNELSU" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNELSU_TAG=$(cat $CONFIG_ENV | grep -w "KERNELSU_TAG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ADD_KPROBES_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_KPROBES_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "DISABLE-LTO=$(cat $CONFIG_ENV | grep -w "DISABLE-LTO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ADD_OVERLAYFS_CONFIG=$(cat $CONFIG_ENV | grep -w "ADD_OVERLAYFS_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "DISABLE_CC_WERROR=$(cat $CONFIG_ENV | grep -w "DISABLE_CC_WERROR" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ENABLE_CCACHE=$(cat $CONFIG_ENV | grep -w "ENABLE_CCACHE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "NEED_DTBO=$(cat $CONFIG_ENV | grep -w "NEED_DTBO" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KSU_EXPECTED_SIZE=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_SIZE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KSU_EXPECTED_HASH=$(cat $CONFIG_ENV | grep -w "KSU_EXPECTED_HASH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV

      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Setup build kernel environment
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Taipei date "+%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3 xz-utils
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace

      - name: Download Custom-Clang
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
              wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
              mkdir clang-aosp
              tar -C clang-aosp/ -zxvf clang.tar.gz
          else
              if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.xz' ]]; then
                      wget -O clang.tar.xz ${{ env.CUSTOM_CLANG_SOURCE }}
                      mkdir clang-aosp
                      tar -C clang-aosp/ -Jxvf clang.tar.xz $(${{ env.CUSTOM_CLANG_SOURCE }} | cut -d "/" -f 9 | sed 's/.tar.xz//g)
              else
                  if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
                      git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
                  else
                      wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
                      mkdir clang-aosp
                      unzip clang.zip -d clang-aosp/
                  fi
              fi
          fi

      - name: Download Custom-Gcc
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace

          if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
              wget -O gcc-64.tar.gz ${{ env.CUSTOM_GCC_64_SOURCE }}
              mkdir gcc-64
              tar -C gcc-64/ -zxvf gcc-64.tar.gz
          else
              if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} =~ git ]]; then
                  git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
              else
                  wget -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
                  mkdir gcc-64
                  unzip gcc-64.zip -d gcc-64/
              fi
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/${{ env.CUSTOM_GCC_64_BIN }}" >> $GITHUB_ENV

          if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
              wget -O gcc-32.tar.gz ${{ env.CUSTOM_GCC_32_SOURCE }}
              mkdir gcc-32
              tar -C gcc-32/ -zxvf gcc-32.tar.gz
          else
              if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} =~ git ]]; then
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
              else
                wget -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                unzip gcc-32.zip -d gcc-32/
              fi
          fi
          echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/${{ env.CUSTOM_GCC_32_BIN }}" >> $GITHUB_ENV

      - name: Download kernel source
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1

      - name: Setup KernelSU
        if: env.ENABLE_KERNELSU == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
          echo "UPLOADNAME=-KernelSU" >> $GITHUB_ENV

      - name: Setup Configuration for Kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          if [ ${{ env.ADD_KPROBES_CONFIG }} = true ]; then
              echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
              echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.DISABLE-LTO }} = true ]; then
              sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
              echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi
          if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
              echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
          fi

      - name: Setup ccache
        if: env.ENABLE_CCACHE == 'true'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: build-kernel-${{ env.DEVICE }}${{ env.UPLOADNAME }}
          max-size: 2G

      - name: Build kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin:$PATH
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin:$PATH
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          if [ ! -z ${{ env.KSU_EXPECTED_SIZE }} ] && [ ! -z ${{ env.KSU_EXPECTED_HASH }} ]; then
              export KSU_EXPECTED_SIZE=${{ env.KSU_EXPECTED_SIZE }}
              export KSU_EXPECTED_HASH=${{ env.KSU_EXPECTED_HASH }}
          fi
          make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.KERNEL_CONFIG }}
          if [ ${{ env.ENABLE_CCACHE }} = true ]; then
              make -j$(nproc --all) CC="ccache clang" O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}
          else
              make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}
          fi

      - name: Check a kernel output files
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
              echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
          else
              echo "Kernel output file is empty"
              exit 1
          fi
          if [ ${{ env.NEED_DTBO }} = true ]; then
              if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img ]; then
                  echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
              else
                  echo "DTBO image is empty"
                  exit 1
              fi
          fi

      - name: Make Anykernel3
        if: env.CHECK_FILE_IS_OK == 'true'
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/osm0sis/AnyKernel3
          sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
          sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
          sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
          if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
              cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
          fi
          rm -rf AnyKernel3/.git* AnyKernel3/README.md

      - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
        if: env.CHECK_FILE_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.KERNEL_IMAGE_NAME }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

      - name: Upload AnyKernel3
        if: env.CHECK_FILE_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: AnyKernel3${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/AnyKernel3/*

      - name: Upload DTBO image
        if: env.CHECK_DTBO_IS_OK == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
          path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img
